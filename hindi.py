import streamlit as st
import google.generativeai as genai
import pandas as pd
import json
from datetime import datetime
import plotly.express as px
import os
from dotenv import load_dotenv
from gtts import gTTS
import tempfile

# Load .env file
load_dotenv()

# Get API key from environment
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# Page configuration
st.set_page_config(
    page_title="ЁЯМ╛ рдлрд╕рд▓ рдореБрдирд╛рдлрд╛ рд╕рд▓рд╛рд╣рдХрд╛рд░",
    page_icon="ЁЯМ╛",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Indian-themed CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.8rem;
        font-weight: bold;
        color: #FF6B35;
        text-align: center;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .sub-header {
        color: #138808;
        text-align: center;
        font-size: 1.2rem;
        margin-bottom: 2rem;
    }
    .crop-card {
        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 5px solid #FF6B35;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        color: #2C3E50 !important;
    }
    .crop-card p {
        color: #2C3E50 !important;
        font-size: 1rem;
        margin: 0.5rem 0;
    }
    .crop-card strong {
        color: #8B4513 !important;
    }
    .crop-title {
        color: #8B4513;
        font-size: 1.4rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    .profit-high { color: #228B22; font-weight: bold; }
    .profit-medium { color: #FF8C00; font-weight: bold; }
    .profit-low { color: #DC143C; font-weight: bold; }
    .input-container {
        background: linear-gradient(135deg, #FFE4B5 0%, #FFDAB9 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 2px solid #FF6B35;
    }
    .recommendation-header {
        color: #8B4513;
        font-size: 1.8rem;
        font-weight: bold;
        text-align: center;
        margin: 1rem 0;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'recommendations' not in st.session_state:
    st.session_state.recommendations = None

def speak_text(text, lang="en"):
    """Convert text to speech and return audio file path"""
    try:
        tts = gTTS(text=text, lang=lang)
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
        tts.save(temp_file.name)
        return temp_file.name
    except Exception as e:
        st.error(f"рдЖрд╡рд╛рдЬрд╝ рддреНрд░реБрдЯрд┐: {e}")
        return None
 

def setup_gemini_api():
    """Setup Gemini API configuration"""
    try:
        if not GEMINI_API_KEY:
            st.error("тЭМ Gemini API Key рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдЗрд╕реЗ рдЕрдкрдиреА .env рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рд╕реЗрдЯ рдХрд░реЗрдВред")
            return None

        genai.configure(api_key=GEMINI_API_KEY)
        model_names = ['gemini-1.5-flash', 'gemini-1.5-pro', 'gemini-pro']
        
        for model_name in model_names:
            try:
                model = genai.GenerativeModel(model_name)
                test_response = model.generate_content("Test")
                return model
            except:
                continue
        return None
    except Exception as e:
        st.error(f"Gemini рд╕реЗрдЯрдЕрдк рддреНрд░реБрдЯрд┐: {e}")
        return None


def get_crop_recommendations(model, month, location, budget, experience, farm_size, organic):
    """Get crop recommendations using Gemini API"""
    try:
        prompt = f"""
        рдЖрдк рдПрдХ рднрд╛рд░рддреАрдп рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╣реИрдВред рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдлрд╕рд▓реЛрдВ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВ:
        
        рдорд╣реАрдирд╛: {month}
        рд╕реНрдерд╛рди: {location}
        рдмрдЬрдЯ: тВ╣{budget}
        рдЕрдиреБрднрд╡: {experience}
        рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░: {farm_size}
        рдЬреИрд╡рд┐рдХ рдЦреЗрддреА: {'рд╣рд╛рдБ' if organic else 'рдирд╣реАрдВ'}
        
        рдХреГрдкрдпрд╛ JSON рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВ (рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рд╣рд┐рдВрджреА рдореЗрдВ):
        {{
            "recommendations": [
                {{
                    "crop_name": "рдлрд╕рд▓ рдХрд╛ рдирд╛рдо",
                    "profit_potential": "рдЙрдЪреНрдЪ/рдордзреНрдпрдо/рдХрдо",
                    "estimated_roi": "рдкреНрд░рддрд┐рд╢рдд рдореЗрдВ",
                    "investment_required": "рд░рд╛рд╢рд┐",
                    "growing_period": "рдорд╣реАрдиреЛрдВ рдореЗрдВ рд╕рдордп",
                    "key_benefits": ["рд▓рд╛рдн1", "рд▓рд╛рдн2", "рд▓рд╛рдн3"],
                    "considerations": ["рд╡рд┐рдЪрд╛рд░1", "рд╡рд┐рдЪрд╛рд░2"],
                    "market_price_range": "рдмрд╛рдЬрд╛рд░ рджрд░"
                }}
            ],
            "general_advice": "рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣ рд╣рд┐рдВрджреА рдореЗрдВ",
            "seasonal_notes": "рдореМрд╕рдореА рдЯрд┐рдкреНрдкрдгреА рд╣рд┐рдВрджреА рдореЗрдВ"
        }}
        
        рднрд╛рд░рддреАрдп рдореМрд╕рдо рдкреИрдЯрд░реНрди, рдорд┐рдЯреНрдЯреА рдХреА рд╕реНрдерд┐рддрд┐ рдФрд░ рдмрд╛рдЬрд╛рд░ рдХреА рд╕реНрдерд┐рддрд┐ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ 3-5 рдлрд╕рд▓реЛрдВ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВред
        рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рд╣рд┐рдВрджреА рдореЗрдВ рджреЗрдВред
        """
        
        response = model.generate_content(prompt)
        response_text = response.text
        
        start_idx = response_text.find('{')
        end_idx = response_text.rfind('}') + 1
        
        if start_idx != -1 and end_idx != -1:
            json_str = response_text[start_idx:end_idx]
            return json.loads(json_str)
        else:
            return {
                "recommendations": [{
                    "crop_name": "рд╕реНрдерд╛рдиреАрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ",
                    "profit_potential": "рдкрд░рд┐рд╡рд░реНрддрдирд╢реАрд▓",
                    "estimated_roi": "рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
                    "investment_required": f"тВ╣{budget} рдХреЗ рднреАрддрд░",
                    "growing_period": "рдЕрд▓рдЧ-рдЕрд▓рдЧ",
                    "key_benefits": ["рд╕реНрдерд╛рдиреАрдп рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЖрд╡рд╢реНрдпрдХ"],
                    "considerations": ["рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ"],
                    "market_price_range": "рдмрд╛рдЬрд╛рд░ рдкрд░ рдирд┐рд░реНрднрд░"
                }],
                "general_advice": response_text[:300],
                "seasonal_notes": f"{location} рдореЗрдВ {month} рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдореМрд╕рдо рдкреИрдЯрд░реНрди рджреЗрдЦреЗрдВред"
            }
    except Exception as e:
        st.error(f"рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {str(e)}")
        return None

def display_crop_card(crop_data, index):
    """Display crop recommendation card"""
    # Map profit potential to CSS class
    profit_mapping = {
        'рдЙрдЪреНрдЪ': 'profit-high',
        'High': 'profit-high',
        'рдордзреНрдпрдо': 'profit-medium',
        'Medium': 'profit-medium', 
        'рдХрдо': 'profit-low',
        'Low': 'profit-low'
    }
    profit_class = profit_mapping.get(crop_data['profit_potential'], 'profit-medium')
    
    st.markdown(f"""
    <div class="crop-card">
        <div class="crop-title">ЁЯМ▒ {crop_data['crop_name']}</div>
        <p><strong>рдЙрдЧрд╛рдиреЗ рдХреА рдЕрд╡рдзрд┐:</strong> {crop_data['growing_period']}</p>
        <p><strong>рдЖрд╡рд╢реНрдпрдХ рдирд┐рд╡реЗрд╢:</strong> {crop_data['investment_required']}</p>
        <p><strong>рдмрд╛рдЬрд╛рд░ рджрд░:</strong> {crop_data['market_price_range']}</p>
        <p><strong>рдореБрдирд╛рдлреЗ рдХреА рд╕рдВрднрд╛рд╡рдирд╛:</strong> <span class="{profit_class}">{crop_data['profit_potential']}</span></p>
        <p><strong>ROI:</strong> {crop_data['estimated_roi']}</p>
    </div>
    """, unsafe_allow_html=True)

def main():
    # Header
    st.markdown('<h1 class="main-header">ЁЯМ╛ рдлрд╕рд▓ рдореБрдирд╛рдлрд╛ рд╕рд▓рд╛рд╣рдХрд╛рд░</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП AI-рдЖрдзрд╛рд░рд┐рдд рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рд╕рд┐рд╕реНрдЯрдо</p>', unsafe_allow_html=True)
    
    # Input Section
    st.markdown('<div class="input-container">', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        months = ['рдЬрдирд╡рд░реА', 'рдлрд░рд╡рд░реА', 'рдорд╛рд░реНрдЪ', 'рдЕрдкреНрд░реИрд▓', 'рдордИ', 'рдЬреВрди',
                 'рдЬреБрд▓рд╛рдИ', 'рдЕрдЧрд╕реНрдд', 'рд╕рд┐рддрдВрдмрд░', 'рдЕрдХреНрдЯреВрдмрд░', 'рдирд╡рдВрдмрд░', 'рджрд┐рд╕рдВрдмрд░']
        selected_month = st.selectbox("ЁЯУЕ рдорд╣реАрдирд╛", months, index=datetime.now().month - 1)
        
        location = st.text_input("ЁЯУН рд╕реНрдерд╛рди", placeholder="рдЬреИрд╕реЗ: рдкрдВрдЬрд╛рдм, рднрд╛рд░рдд рдпрд╛ рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░")
    
    with col2:
        budget = st.number_input("ЁЯТ░ рдмрдЬрдЯ (тВ╣)", min_value=1000, max_value=10000000, value=50000, step=5000)
        
        experience = st.selectbox("рдЕрдиреБрднрд╡ рд╕реНрддрд░", ["рдирдпрд╛ рдХрд┐рд╕рд╛рди", "рдордзреНрдпрдо", "рдЕрдиреБрднрд╡реА рдХрд┐рд╕рд╛рди"])
        
        farm_size = st.selectbox("рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░", ["рдЫреЛрдЯрд╛ (5 рдПрдХрдбрд╝ рд╕реЗ рдХрдо)", "рдордзреНрдпрдо (5-50 рдПрдХрдбрд╝)", "рдмрдбрд╝рд╛ (50+ рдПрдХрдбрд╝)"])
        
        organic = st.checkbox("рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рдкрд╕рдВрдж рдХрд░реЗрдВ")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Get Recommendations Button
    if st.button("ЁЯЪА рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ", type="primary", use_container_width=True):
        if not location.strip():
            st.error("рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ")
            return
        
        model = setup_gemini_api()
        if not model:
            st.error("Gemini API рдХрдиреЗрдХреНрд╢рди рд╕рдорд╕реНрдпрд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВред")
            return
        
        with st.spinner("ЁЯдЦ рдмрд╛рдЬрд╛рд░ рдХреА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдФрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рддреИрдпрд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реВрдВ..."):
            recommendations = get_crop_recommendations(model, selected_month, location, budget, 
                                                     experience, farm_size, organic)
            
            if recommendations:
                st.session_state.recommendations = recommendations
                st.success("тЬЕ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рддреИрдпрд╛рд░ рд╣реЛ рдЧрдИрдВ!")
            else:
                st.error("тЭМ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рддреИрдпрд╛рд░ рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
    
    # Display Recommendations
    if st.session_state.recommendations:
        recommendations = st.session_state.recommendations
        
        # Summary Metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("ЁЯУЕ рдорд╣реАрдирд╛", selected_month)
        with col2:
            st.metric("ЁЯУН рд╕реНрдерд╛рди", location)
        with col3:
            st.metric("ЁЯТ░ рдмрдЬрдЯ", f"тВ╣{budget:,}")
        with col4:
            st.metric("ЁЯМ▒ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ", len(recommendations['recommendations']))
        
        # Recommendations
        st.markdown('<h2 class="recommendation-header">ЁЯОп рд╕реБрдЭрд╛рдИ рдЧрдИ рдлрд╕рд▓реЗрдВ</h2>', unsafe_allow_html=True)
        
        for i, crop in enumerate(recommendations['recommendations']):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                display_crop_card(crop, i)
            
            with col2:
                st.markdown(f"### #{i+1}")
                with st.expander("ЁЯУЭ рд╡рд┐рд╡рд░рдг"):
                    st.markdown("**ЁЯОп рдореБрдЦреНрдп рд▓рд╛рдн:**")
                    for benefit in crop['key_benefits']:
                        st.write(f"тАв {benefit}")
                    
                    st.markdown("**тЪая╕П рд╡рд┐рдЪрд╛рд░рдгреАрдп рдмрд╛рддреЗрдВ:**")
                    for consideration in crop['considerations']:
                        st.write(f"тАв {consideration}")
        
        # Analysis Tab
        if len(recommendations['recommendations']) > 1:
            st.subheader("ЁЯУК рдореБрдирд╛рдлрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг")
            
            crop_names = [crop['crop_name'] for crop in recommendations['recommendations']]
            profit_levels = [crop['profit_potential'] for crop in recommendations['recommendations']]
            
            profit_numeric = []
            for level in profit_levels:
                if level in ['рдЙрдЪреНрдЪ', 'High']:
                    profit_numeric.append(3)
                elif level in ['рдордзреНрдпрдо', 'Medium']:
                    profit_numeric.append(2)
                else:
                    profit_numeric.append(1)
            
            fig = px.bar(x=crop_names, y=profit_numeric, title="рдореБрдирд╛рдлреЗ рдХреА рддреБрд▓рдирд╛",
                        labels={'x': 'рдлрд╕рд▓реЗрдВ', 'y': 'рдореБрдирд╛рдлреЗ рдХрд╛ рд╕реНрддрд░'},
                        color=profit_numeric, color_continuous_scale='Oranges')
            
            fig.update_layout(showlegend=False,
                            yaxis=dict(tickmode='array', tickvals=[1, 2, 3], 
                                     ticktext=['рдХрдо', 'рдордзреНрдпрдо', 'рдЙрдЪреНрдЪ']))
            st.plotly_chart(fig, use_container_width=True)
        
        # Advice Section
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### ЁЯМ╛ рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣")
            st.info(recommendations['general_advice'])
        
        with col2:
            st.markdown("#### ЁЯУЕ рдореМрд╕рдореА рдЯрд┐рдкреНрдкрдгреА")
            st.warning(recommendations['seasonal_notes'])

        # ЁЯСЙ Voice Feature
        st.markdown("### ЁЯФК рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рд╕реБрдиреЗрдВ")
        speech_text = (
            "рдпрд╣рд╛рдБ рдЖрдкрдХреА рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рд╣реИрдВред "
            + " , ".join([crop['crop_name'] for crop in recommendations['recommendations']])
            + ". рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: " + recommendations['general_advice']
            + ". рдореМрд╕рдореА рдЯрд┐рдкреНрдкрдгреА: " + recommendations['seasonal_notes']
        )
        
        audio_path = speak_text(speech_text, lang="hi")
        if audio_path:
            st.audio(audio_path, format="audio/mp3")
        
        # Additional Tips
        st.markdown("#### ЁЯУЪ рдЕрддрд┐рд░рд┐рдХреНрдд рд╕реБрдЭрд╛рд╡")
        tips = [
            "ЁЯФН рдЕрдВрддрд┐рдо рдирд┐рд░реНрдгрдп рд▓реЗрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рд╕реНрдерд╛рдиреАрдп рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ рдЬрд╛рдВрдЪреЗрдВ",
            "ЁЯМбя╕П рдЕрдкрдиреА рдЪреБрдиреА рдЧрдИ рдлрд╕рд▓реЛрдВ рдкрд░ рдЬрд▓рд╡рд╛рдпреБ рдкрд░рд┐рд╡рд░реНрддрди рдХреЗ рдкреНрд░рднрд╛рд╡реЛрдВ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ",
            "ЁЯТз рдкрд╛рдиреА рдХреА рдЙрдкрд▓рдмреНрдзрддрд╛ рдФрд░ рд╕рд┐рдВрдЪрд╛рдИ рдХреА рд▓рд╛рдЧрдд рдХрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░реЗрдВ",
            "ЁЯЪЬ рдорд╢реАрдирд░реА рдФрд░ рд╢реНрд░рдо рдХреА рд▓рд╛рдЧрдд рдХрд╛ рд╣рд┐рд╕рд╛рдм рд░рдЦреЗрдВ",
            "ЁЯУИ рдЬреЛрдЦрд┐рдо рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдлрд╕рд▓реЛрдВ рдореЗрдВ рд╡рд┐рд╡рд┐рдзрддрд╛ рд▓рд╛рдПрдВ"
        ]
        
        for tip in tips:
            st.write(tip)
    
    else:
        # Welcome Section
        st.markdown("""
        ## ЁЯМЯ рдлрд╕рд▓ рдореБрдирд╛рдлрд╛ рд╕рд▓рд╛рд╣рдХрд╛рд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!
        
        рдпрд╣ AI-рдЖрдзрд╛рд░рд┐рдд рдПрдкреНрд▓рд┐рдХреЗрд╢рди рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╣реА рдлрд╕рд▓ рдЪреБрдирдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ:
        
        - **ЁЯЧУя╕П рдореМрд╕рдореА рд╕рдордп:** рдЕрдзрд┐рдХрддрдо рдЙрддреНрдкрд╛рджрди рдХреЗ рд▓рд┐рдП рд╕рд╣реА рд╕рдордп
        - **ЁЯМН рд╕реНрдерд╛рди-рд╡рд┐рд╢рд┐рд╖реНрдЯ:** рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреА рдЬрд▓рд╡рд╛рдпреБ рдФрд░ рдорд┐рдЯреНрдЯреА рдХреЗ рдЕрдиреБрд╕рд╛рд░
        - **ЁЯТ░ рдмрдЬрдЯ рдЕрдиреБрдХреВрд▓:** рдирд┐рд╡реЗрд╢ рдФрд░ ROI рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг
        - **ЁЯУК рдмрд╛рдЬрд╛рд░ рдмреБрджреНрдзрд┐:** рд╡рд░реНрддрдорд╛рди рдореВрд▓реНрдп рд░реБрдЭрд╛рди рдФрд░ рдорд╛рдВрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди
        
        ### ЁЯЪА рд╢реБрд░реБрдЖрдд рдХреИрд╕реЗ рдХрд░реЗрдВ:
        1. рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдФрд░ рдкрд╕рдВрджреАрджрд╛ рдорд╣реАрдирд╛ рджрд░реНрдЬ рдХрд░реЗрдВ
        2. рдЕрдкрдиреА рдЙрдкрд▓рдмреНрдз рдмрдЬрдЯ рдФрд░ рдЦреЗрдд рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ
        3. рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реБрдЭрд╛рд╡ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдЯрди рджрдмрд╛рдПрдВ
        
        *рдЕрдкрдиреЗ рдХреГрд╖рд┐ рдореБрдирд╛рдлреЗ рдХреЛ рдЕрдзрд┐рдХрддрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ? рдЪрд▓рд┐рдП рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВ! ЁЯМ╛*
        """)

if __name__ == "__main__":
    main()