import streamlit as st
import google.generativeai as genai
import pandas as pd
import json
from datetime import datetime
import plotly.express as px

# Page configuration
st.set_page_config(
    page_title="üåæ ‡¨´‡¨∏‡¨≤ ‡¨≤‡¨æ‡¨≠ ‡¨∏‡¨≤‡¨æ‡¨π‡¨ï‡¨æ‡¨∞",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Odia-themed CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.8rem;
        font-weight: bold;
        color: #FF6B35;
        text-align: center;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .sub-header {
        color: #138808;
        text-align: center;
        font-size: 1.2rem;
        margin-bottom: 2rem;
    }
    .crop-card {
        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 5px solid #FF6B35;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        color: #2C3E50 !important;
    }
    .crop-card p {
        color: #2C3E50 !important;
        font-size: 1rem;
        margin: 0.5rem 0;
    }
    .crop-card strong {
        color: #8B4513 !important;
    }
    .crop-title {
        color: #8B4513;
        font-size: 1.4rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    .profit-high { color: #228B22 !important; font-weight: bold; }
    .profit-medium { color: #FF8C00 !important; font-weight: bold; }
    .profit-low { color: #DC143C !important; font-weight: bold; }
    .input-container {
        background: linear-gradient(135deg, #FFE4B5 0%, #FFDAB9 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 2px solid #FF6B35;
    }
    .recommendation-header {
        color: #8B4513;
        font-size: 1.8rem;
        font-weight: bold;
        text-align: center;
        margin: 1rem 0;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'recommendations' not in st.session_state:
    st.session_state.recommendations = None

# Embedded API Key
GEMINI_API_KEY = "AIzaSyDnxrqmQWtSi9f8nYAFIOl7FYDOkfYwKOE"

def setup_gemini_api():
    """Setup Gemini API configuration"""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model_names = ['gemini-1.5-flash', 'gemini-1.5-pro', 'gemini-pro']
        
        for model_name in model_names:
            try:
                model = genai.GenerativeModel(model_name)
                test_response = model.generate_content("Test")
                return model
            except:
                continue
        return None
    except:
        return None

def get_crop_recommendations(model, month, location, budget, experience, farm_size, organic):
    """Get crop recommendations using Gemini API"""
    try:
        prompt = f"""
        ‡¨Ü‡¨™‡¨£ ‡¨ú‡¨£‡≠á ‡¨≠‡¨æ‡¨∞‡¨§‡≠Ä‡≠ü ‡¨ï‡≠É‡¨∑‡¨ø ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂‡¨¶‡¨æ‡¨§‡¨æ | ‡¨®‡¨ø‡¨Æ‡≠ç‡¨®‡¨≤‡¨ø‡¨ñ‡¨ø‡¨§ ‡¨§‡¨•‡≠ç‡≠ü ‡¨Ü‡¨ß‡¨æ‡¨∞‡¨∞‡≠á ‡¨´‡¨∏‡¨≤ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å:
        
        ‡¨Æ‡¨æ‡¨∏: {month}
        ‡¨∏‡≠ç‡¨•‡¨æ‡¨®: {location}
        ‡¨¨‡¨ú‡≠á‡¨ü‡≠ç: ‚Çπ{budget}
        ‡¨Ö‡¨®‡≠Å‡¨≠‡¨¨: {experience}
        ‡¨ú‡¨Æ‡¨ø ‡¨Ü‡¨ï‡¨æ‡¨∞: {farm_size}
        ‡¨ú‡≠à‡¨¨‡¨ø‡¨ï ‡¨ö‡¨æ‡¨∑: {'‡¨π‡¨Å' if organic else '‡¨®‡¨æ'}
        
        JSON format ‡¨∞‡≠á ‡¨â‡¨§‡≠ç‡¨§‡¨∞ ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å:
        {{
            "recommendations": [
                {{
                    "crop_name": "‡¨´‡¨∏‡¨≤‡¨∞ ‡¨®‡¨æ‡¨Æ",
                    "profit_potential": "High/Medium/Low",
                    "estimated_roi": "‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨∂‡¨§",
                    "investment_required": "‡¨™‡¨∞‡¨ø‡¨Æ‡¨æ‡¨£",
                    "growing_period": "‡¨Æ‡¨æ‡¨∏‡¨∞‡≠á ‡¨∏‡¨Æ‡≠ü",
                    "key_benefits": ["‡¨≤‡¨æ‡¨≠1", "‡¨≤‡¨æ‡¨≠2", "‡¨≤‡¨æ‡¨≠3"],
                    "considerations": ["‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ1", "‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ2"],
                    "market_price_range": "‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨¶‡¨∞"
                }}
            ],
            "general_advice": "‡¨∏‡¨æ‡¨ß‡¨æ‡¨∞‡¨£ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂",
            "seasonal_notes": "‡¨ã‡¨§‡≠Å‡¨ó‡¨§ ‡¨®‡≠ã‡¨ü‡≠ç‡¨∏"
        }}
        
        ‡¨≠‡¨æ‡¨∞‡¨§‡≠Ä‡≠ü ‡¨ã‡¨§‡≠Å, ‡¨Æ‡¨æ‡¨ü‡¨ø ‡¨è‡¨¨‡¨Ç ‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨Ö‡¨¨‡¨∏‡≠ç‡¨•‡¨æ ‡¨Ö‡¨®‡≠Å‡¨∏‡¨æ‡¨∞‡≠á 3-5 ‡¨ü‡¨ø ‡¨´‡¨∏‡¨≤‡¨∞ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å |
        """
        
        response = model.generate_content(prompt)
        response_text = response.text
        
        start_idx = response_text.find('{')
        end_idx = response_text.rfind('}') + 1
        
        if start_idx != -1 and end_idx != -1:
            json_str = response_text[start_idx:end_idx]
            return json.loads(json_str)
        else:
            return {
                "recommendations": [{
                    "crop_name": "‡¨∏‡≠ç‡¨•‡¨æ‡¨®‡≠Ä‡≠ü ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å",
                    "profit_potential": "Variable",
                    "estimated_roi": "‡¨¨‡¨ø‡¨∂‡≠á‡¨∑‡¨ú‡≠ç‡¨û‡¨ô‡≠ç‡¨ï ‡¨∏‡¨π ‡¨Ø‡≠ã‡¨ó‡¨æ‡¨Ø‡≠ã‡¨ó ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
                    "investment_required": f"‚Çπ{budget} ‡¨Æ‡¨ß‡≠ç‡≠ü‡¨∞‡≠á",
                    "growing_period": "‡¨¨‡¨ø‡¨≠‡¨ø‡¨®‡≠ç‡¨®",
                    "key_benefits": ["‡¨∏‡≠ç‡¨•‡¨æ‡¨®‡≠Ä‡≠ü ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨Ü‡¨¨‡¨∂‡≠ç‡≠ü‡¨ï"],
                    "considerations": ["‡¨ï‡≠É‡¨∑‡¨ø ‡¨¨‡¨ø‡¨≠‡¨æ‡¨ó ‡¨∏‡¨π ‡¨Ø‡≠ã‡¨ó‡¨æ‡¨Ø‡≠ã‡¨ó ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å"],
                    "market_price_range": "‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨â‡¨™‡¨∞‡≠á ‡¨®‡¨ø‡¨∞‡≠ç‡¨≠‡¨∞‡¨∂‡≠Ä‡¨≥"
                }],
                "general_advice": response_text[:300],
                "seasonal_notes": f"{month} ‡¨∞‡≠á {location} ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡≠ç‡¨•‡¨æ‡¨®‡≠Ä‡≠ü ‡¨ã‡¨§‡≠Å pattern ‡¨¶‡≠á‡¨ñ‡¨®‡≠ç‡¨§‡≠Å |"
            }
    except Exception as e:
        st.error(f"‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨™‡¨æ‡¨á‡¨¨‡¨æ‡¨∞‡≠á ‡¨∏‡¨Æ‡¨∏‡≠ç‡≠ü‡¨æ: {str(e)}")
        return None

def display_crop_card(crop_data, index):
    """Display crop recommendation card"""
    # Map profit potential to CSS class
    profit_mapping = {
        'High': 'profit-high',
        'Medium': 'profit-medium', 
        'Low': 'profit-low'
    }
    profit_class = profit_mapping.get(crop_data['profit_potential'], 'profit-medium')
    
    st.markdown(f"""
    <div class="crop-card">
        <div class="crop-title">üå± {crop_data['crop_name']}</div>
        <p><strong>‡¨¨‡≠É‡¨¶‡≠ç‡¨ß‡¨ø‡¨∞ ‡¨∏‡¨Æ‡≠ü:</strong> {crop_data['growing_period']}</p>
        <p><strong>‡¨®‡¨ø‡¨¨‡≠á‡¨∂ ‡¨Ü‡¨¨‡¨∂‡≠ç‡≠ü‡¨ï:</strong> {crop_data['investment_required']}</p>
        <p><strong>‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨¶‡¨∞:</strong> {crop_data['market_price_range']}</p>
        <p><strong>‡¨≤‡¨æ‡¨≠ ‡¨∏‡¨Æ‡≠ç‡¨≠‡¨æ‡¨¨‡¨®‡¨æ:</strong> <span class="{profit_class}">{crop_data['profit_potential']}</span></p>
        <p><strong>ROI:</strong> {crop_data['estimated_roi']}</p>
    </div>
    """, unsafe_allow_html=True)

def main():
    # Header
    st.markdown('<h1 class="main-header">üåæ ‡¨´‡¨∏‡¨≤ ‡¨≤‡¨æ‡¨≠ ‡¨∏‡¨≤‡¨æ‡¨π‡¨ï‡¨æ‡¨∞</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">‡¨ì‡¨°‡¨º‡¨ø‡¨Ü ‡¨ï‡≠É‡¨∑‡¨ï‡¨ô‡≠ç‡¨ï ‡¨™‡¨æ‡¨á‡¨Å AI-‡¨Ü‡¨ß‡¨æ‡¨∞‡¨ø‡¨§ ‡¨´‡¨∏‡¨≤ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨∏‡¨ø‡¨∑‡≠ç‡¨ü‡¨Æ</p>', unsafe_allow_html=True)
    
    # Input Section
    st.markdown('<div class="input-container">', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        months = ['‡¨ú‡¨æ‡¨®‡≠Å‡¨Ü‡¨∞‡≠Ä', '‡¨´‡≠á‡¨¨‡≠É‡¨Ü‡¨∞‡≠Ä', '‡¨Æ‡¨æ‡¨∞‡≠ç‡¨ö‡≠ç‡¨ö', '‡¨è‡¨™‡≠ç‡¨∞‡¨ø‡¨≤‡≠ç', '‡¨Æ‡¨á', '‡¨ú‡≠Å‡¨®‡≠ç',
                 '‡¨ú‡≠Å‡¨≤‡¨æ‡¨á', '‡¨Ö‡¨ó‡¨∑‡≠ç‡¨ü', '‡¨∏‡≠á‡¨™‡≠ç‡¨ü‡≠á‡¨Æ‡≠ç‡¨¨‡¨∞', '‡¨Ö‡¨ï‡≠ç‡¨ü‡≠ã‡¨¨‡¨∞', '‡¨®‡¨≠‡≠á‡¨Æ‡≠ç‡¨¨‡¨∞', '‡¨°‡¨ø‡¨∏‡≠á‡¨Æ‡≠ç‡¨¨‡¨∞']
        selected_month = st.selectbox("üìÖ ‡¨Æ‡¨æ‡¨∏", months, index=datetime.now().month - 1)
        
        location = st.text_input("üìç ‡¨∏‡≠ç‡¨•‡¨æ‡¨®", placeholder="‡¨Ø‡≠á‡¨™‡¨∞‡¨ø: ‡¨ì‡¨°‡¨º‡¨ø‡¨∂‡¨æ, ‡¨≠‡¨æ‡¨∞‡¨§ ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨ï‡¨ü‡¨ï")
    
    with col2:
        budget = st.number_input("üí∞ ‡¨¨‡¨ú‡≠á‡¨ü‡≠ç (‚Çπ)", min_value=1000, max_value=10000000, value=50000, step=5000)
        
        experience = st.selectbox("‡¨Ö‡¨®‡≠Å‡¨≠‡¨¨ ‡¨∏‡≠ç‡¨§‡¨∞", ["‡¨®‡≠Ç‡¨Ü ‡¨ï‡≠É‡¨∑‡¨ï", "‡¨Æ‡¨ß‡≠ç‡≠ü‡¨Æ ‡¨Ö‡¨®‡≠Å‡¨≠‡¨¨", "‡¨Ö‡¨®‡≠Å‡¨≠‡¨¨‡≠Ä ‡¨ï‡≠É‡¨∑‡¨ï"])
        
        farm_size = st.selectbox("‡¨ú‡¨Æ‡¨ø ‡¨Ü‡¨ï‡¨æ‡¨∞", ["‡¨õ‡≠ã‡¨ü (5 ‡¨è‡¨ï‡¨∞ ‡¨ï‡¨Æ‡≠ç)", "‡¨Æ‡¨ß‡≠ç‡≠ü‡¨Æ (5-50 ‡¨è‡¨ï‡¨∞)", "‡¨¨‡¨°‡¨º (50+ ‡¨è‡¨ï‡¨∞)"])
        
        organic = st.checkbox("‡¨ú‡≠à‡¨¨‡¨ø‡¨ï ‡¨ö‡¨æ‡¨∑‡¨ï‡≠Å ‡¨™‡≠ç‡¨∞‡¨æ‡¨ß‡¨æ‡¨®‡≠ç‡≠ü")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Get Recommendations Button
    if st.button("üöÄ ‡¨´‡¨∏‡¨≤ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨™‡¨æ‡¨Ü‡¨®‡≠ç‡¨§‡≠Å", type="primary", use_container_width=True):
        if not location.strip():
            st.error("‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å")
            return
        
        model = setup_gemini_api()
        if not model:
            st.error("Gemini API ‡¨∏‡¨Ç‡¨Ø‡≠ã‡¨ó‡¨∞‡≠á ‡¨∏‡¨Æ‡¨∏‡≠ç‡≠ü‡¨æ | ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨®‡≠á‡¨ü‡≠ç ‡¨∏‡¨Ç‡¨Ø‡≠ã‡¨ó ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å |")
            return
        
        with st.spinner("ü§ñ ‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨Ö‡¨¨‡¨∏‡≠ç‡¨•‡¨æ‡¨∞ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨™‡≠ç‡¨∞‡¨∏‡≠ç‡¨§‡≠Å‡¨§ ‡¨ï‡¨∞‡¨æ‡¨Ø‡¨æ‡¨â‡¨õ‡¨ø..."):
            recommendations = get_crop_recommendations(model, selected_month, location, budget, 
                                                     experience, farm_size, organic)
            
            if recommendations:
                st.session_state.recommendations = recommendations
                st.success("‚úÖ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï ‡¨∏‡¨´‡¨≥‡¨§‡¨æ‡¨∞ ‡¨∏‡¨π ‡¨™‡≠ç‡¨∞‡¨∏‡≠ç‡¨§‡≠Å‡¨§ ‡¨ï‡¨∞‡¨æ‡¨Ø‡¨æ‡¨á‡¨õ‡¨ø!")
            else:
                st.error("‚ùå ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨™‡≠ç‡¨∞‡¨∏‡≠ç‡¨§‡≠Å‡¨§ ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ‡¨∞‡≠á ‡¨¨‡¨ø‡¨´‡¨≥ | ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨™‡≠Å‡¨®‡¨É ‡¨ö‡≠á‡¨∑‡≠ç‡¨ü‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å |")
    
    # Display Recommendations
    if st.session_state.recommendations:
        recommendations = st.session_state.recommendations
        
        # Summary Metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìÖ ‡¨Æ‡¨æ‡¨∏", selected_month)
        with col2:
            st.metric("üìç ‡¨∏‡≠ç‡¨•‡¨æ‡¨®", location)
        with col3:
            st.metric("üí∞ ‡¨¨‡¨ú‡≠á‡¨ü‡≠ç", f"‚Çπ{budget:,}")
        with col4:
            st.metric("üå± ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂", len(recommendations['recommendations']))
        
        # Recommendations
        st.markdown('<h2 class="recommendation-header">üéØ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂‡¨ø‡¨§ ‡¨´‡¨∏‡¨≤‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï</h2>', unsafe_allow_html=True)
        
        for i, crop in enumerate(recommendations['recommendations']):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                display_crop_card(crop, i)
            
            with col2:
                st.markdown(f"### #{i+1}")
                with st.expander("üìù ‡¨¨‡¨ø‡¨∏‡≠ç‡¨§‡¨æ‡¨∞ ‡¨∏‡¨π‡¨ø‡¨§"):
                    st.markdown("**üéØ ‡¨Æ‡≠Å‡¨ñ‡≠ç‡≠ü ‡¨≤‡¨æ‡¨≠‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï:**")
                    for benefit in crop['key_benefits']:
                        st.write(f"‚Ä¢ {benefit}")
                    
                    st.markdown("**‚ö†Ô∏è ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï:**")
                    for consideration in crop['considerations']:
                        st.write(f"‚Ä¢ {consideration}")
        
        # Analysis Tab
        if len(recommendations['recommendations']) > 1:
            st.subheader("üìä ‡¨≤‡¨æ‡¨≠ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£")
            
            crop_names = [crop['crop_name'] for crop in recommendations['recommendations']]
            profit_levels = [crop['profit_potential'] for crop in recommendations['recommendations']]
            
            profit_numeric = []
            for level in profit_levels:
                if level == 'High':
                    profit_numeric.append(3)
                elif level == 'Medium':
                    profit_numeric.append(2)
                else:
                    profit_numeric.append(1)
            
            fig = px.bar(x=crop_names, y=profit_numeric, title="‡¨≤‡¨æ‡¨≠ ‡¨§‡≠Å‡¨≥‡¨®‡¨æ",
                        labels={'x': '‡¨´‡¨∏‡¨≤‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï', 'y': '‡¨≤‡¨æ‡¨≠ ‡¨∏‡≠ç‡¨§‡¨∞'},
                        color=profit_numeric, color_continuous_scale='Oranges')
            
            fig.update_layout(showlegend=False,
                            yaxis=dict(tickmode='array', tickvals=[1, 2, 3], 
                                     ticktext=['‡¨ï‡¨Æ‡≠ç', '‡¨Æ‡¨ß‡≠ç‡≠ü‡¨Æ', '‡¨â‡¨ö‡≠ç‡¨ö']))
            st.plotly_chart(fig, use_container_width=True)
        
        # Advice Section
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üåæ ‡¨∏‡¨æ‡¨ß‡¨æ‡¨∞‡¨£ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂")
            st.info(recommendations['general_advice'])
        
        with col2:
            st.markdown("#### üìÖ ‡¨ã‡¨§‡≠Å‡¨ó‡¨§ ‡¨®‡≠ã‡¨ü‡≠ç‡¨∏")
            st.warning(recommendations['seasonal_notes'])
        
        # Additional Tips
        st.markdown("#### üìö ‡¨Ö‡¨§‡¨ø‡¨∞‡¨ø‡¨ï‡≠ç‡¨§ ‡¨∏‡≠Å‡¨ù‡¨æ‡¨¨")
        tips = [
            "üîç ‡¨∂‡≠á‡¨∑ ‡¨®‡¨ø‡¨∑‡≠ç‡¨™‡¨§‡≠ç‡¨§‡¨ø ‡¨™‡≠Ç‡¨∞‡≠ç‡¨¨‡¨∞‡≠Å ‡¨∏‡≠ç‡¨•‡¨æ‡¨®‡≠Ä‡≠ü ‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨Æ‡≠Ç‡¨≤‡≠ç‡≠ü ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "üå°Ô∏è ‡¨ú‡¨≥‡¨¨‡¨æ‡≠ü‡≠Å ‡¨™‡¨∞‡¨ø‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨®‡¨∞ ‡¨™‡≠ç‡¨∞‡¨≠‡¨æ‡¨¨ ‡¨â‡¨™‡¨∞‡≠á ‡¨¨‡¨ø‡¨ö‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "üíß ‡¨™‡¨æ‡¨£‡¨ø ‡¨â‡¨™‡¨≤‡¨¨‡≠ç‡¨ß‡¨§‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨ú‡¨≥‡¨∏‡≠á‡¨ö‡¨® ‡¨ñ‡¨∞‡≠ç‡¨ö‡≠ç‡¨ö‡¨∞ ‡¨Æ‡≠Ç‡¨≤‡≠ç‡≠ü‡¨æ‡¨ô‡≠ç‡¨ï‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "üöú ‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨™‡¨æ‡¨§‡¨ø ‡¨è‡¨¨‡¨Ç ‡¨∂‡≠ç‡¨∞‡¨Æ ‡¨ñ‡¨∞‡≠ç‡¨ö‡≠ç‡¨ö‡¨∞ ‡¨π‡¨ø‡¨∏‡¨æ‡¨¨ ‡¨∞‡¨ñ‡¨®‡≠ç‡¨§‡≠Å",
            "üìà ‡¨ù‡≠Å‡¨ô‡≠ç‡¨ï‡¨ø ‡¨ï‡¨Æ‡¨æ‡¨á‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨´‡¨∏‡¨≤‡¨∞‡≠á ‡¨¨‡¨ø‡¨¨‡¨ø‡¨ß‡¨§‡¨æ ‡¨Ü‡¨£‡¨®‡≠ç‡¨§‡≠Å"
        ]
        
        for tip in tips:
            st.write(tip)
    
    else:
        # Welcome Section
        st.markdown("""
        ## üåü ‡¨´‡¨∏‡¨≤ ‡¨≤‡¨æ‡¨≠ ‡¨∏‡¨≤‡¨æ‡¨π‡¨ï‡¨æ‡¨∞‡¨∞‡≠á ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨∏‡≠ç‡≠±‡¨æ‡¨ó‡¨§!
        
        ‡¨è‡¨π‡¨ø AI-‡¨Ü‡¨ß‡¨æ‡¨∞‡¨ø‡¨§ ‡¨è‡¨™‡≠ç‡¨≤‡¨ø‡¨ï‡≠á‡¨∏‡¨®‡≠ç ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü ‡¨ï‡≠É‡¨∑‡¨ï‡¨ô‡≠ç‡¨ï‡≠Å ‡¨∏‡¨†‡¨ø‡¨ï ‡¨´‡¨∏‡¨≤ ‡¨¨‡¨æ‡¨õ‡¨ø‡¨¨‡¨æ‡¨∞‡≠á ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨ï‡¨∞‡≠á:
        
        - **üóìÔ∏è ‡¨ã‡¨§‡≠Å‡¨ó‡¨§ ‡¨∏‡¨Æ‡≠ü:** ‡¨Ö‡¨ß‡¨ø‡¨ï‡¨§‡¨Æ ‡¨â‡¨§‡≠ç‡¨™‡¨æ‡¨¶‡¨® ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡¨†‡¨ø‡¨ï ‡¨∏‡¨Æ‡≠ü
        - **üåç ‡¨∏‡≠ç‡¨•‡¨æ‡¨®-‡¨®‡¨ø‡¨∞‡≠ç‡¨¶‡≠ç‡¨¶‡¨ø‡¨∑‡≠ç‡¨ü:** ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨Ö‡¨û‡≠ç‡¨ö‡¨≥‡¨∞ ‡¨ú‡¨≥‡¨¨‡¨æ‡≠ü‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨Æ‡¨æ‡¨ü‡¨ø ‡¨Ö‡¨®‡≠Å‡¨∏‡¨æ‡¨∞‡≠á
        - **üí∞ ‡¨¨‡¨ú‡≠á‡¨ü‡≠ç ‡¨Ö‡¨®‡≠Å‡¨ï‡≠Ç‡¨≥:** ‡¨®‡¨ø‡¨¨‡≠á‡¨∂ ‡¨è‡¨¨‡¨Ç ROI ‡¨∞ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£
        - **üìä ‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨¨‡≠Å‡¨¶‡≠ç‡¨ß‡¨ø:** ‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨Æ‡¨æ‡¨®‡¨∞ ‡¨Æ‡≠Ç‡¨≤‡≠ç‡≠ü ‡¨ß‡¨æ‡¨∞‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨Æ‡¨æ‡¨ó ‡¨™‡≠Ç‡¨∞‡≠ç‡¨¨‡¨æ‡¨®‡≠Å‡¨Æ‡¨æ‡¨®
        
        ### üöÄ ‡¨ï‡¨ø‡¨™‡¨∞‡¨ø ‡¨Ü‡¨∞‡¨Æ‡≠ç‡¨≠ ‡¨ï‡¨∞‡¨ø‡¨¨‡≠á:
        1. ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨è‡¨¨‡¨Ç ‡¨™‡¨∏‡¨®‡≠ç‡¨¶‡¨∞ ‡¨Æ‡¨æ‡¨∏ ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å
        2. ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨â‡¨™‡¨≤‡¨¨‡≠ç‡¨ß ‡¨¨‡¨ú‡≠á‡¨ü‡≠ç ‡¨è‡¨¨‡¨Ç ‡¨ú‡¨Æ‡¨ø‡¨∞ ‡¨¨‡¨ø‡¨¨‡¨∞‡¨£‡≠Ä ‡¨ï‡≠Å‡¨π‡¨®‡≠ç‡¨§‡≠Å
        3. ‡¨¨‡≠ç‡≠ü‡¨ï‡≠ç‡¨§‡¨ø‡¨ó‡¨§ ‡¨∏‡≠Å‡¨ù‡¨æ‡¨¨ ‡¨™‡¨æ‡¨á‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨¨‡¨ü‡¨®‡≠ç ‡¨¶‡¨¨‡¨æ‡¨®‡≠ç‡¨§‡≠Å
        
        *‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨ï‡≠É‡¨∑‡¨ø ‡¨≤‡¨æ‡¨≠‡¨ï‡≠Å ‡¨Ö‡¨ß‡¨ø‡¨ï‡¨§‡¨Æ ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨™‡≠ç‡¨∞‡¨∏‡≠ç‡¨§‡≠Å‡¨§? ‡¨ö‡¨æ‡¨≤‡¨®‡≠ç‡¨§‡≠Å ‡¨Ü‡¨∞‡¨Æ‡≠ç‡¨≠ ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ! üåæ*
        """)

if __name__ == "__main__":
    main()